1. 재활용이 가능한 컴포넌트들은 어떤것들이 존재 하는가?
Transform
BitmapRenderer
TextRenderer
Script
PlayerInput
Camera
Animator

2. Transform의 소유자는? 하나의 게임오브젝트에 멀티 Transform을 허용하는가? 월드 Matrix계산은 언제?
GameObject.cpp line 9 - GameObject 생성 시 Transform을 생성하고 따로 멤버로 가짐
GameObject.h line 34 - 하나의 GameObject에 무조건 하나의 Transform 만 허용함
Transform.cpp line 85 - World 값이 필요할 때 계산됨 필요없으면 계산되지 않음
Transform.h line 19 - 추가로 한 프레임의 Dirty Flag를 둬서 WorldMatrix가 필요한 곳에서도 Transform이 바뀌지 않았다면 계산을 건너뛸 수 있음

3. 각 종류별 컴포넌트를 다루는 Manager or System의 역할은?
WinApp.cpp line 132 - 각 ComponentSystem Update 설명

4. 역할 구분이 모호한 RenderManager는 어떻게 분리되었나?
D2DRenderer.cpp - 출력에 필요한 자원 생성에 관련된 것들 가짐. 출력될 Renderer들을 등록받아서 출력 호출해줌.

5. Scene의 역할은 어디까지 인가?
Scene.cpp line 14, SolarSystem.cpp line 17, GameObject.cpp line 35 - Scene은 GameObject 컨테이너이고 생성 삭제만을 관리하고 GameObject는 Component 컨테이너이고 생성 삭제만을 관리함.

6. 로딩된 리소스 재활용 방식은?
ResourceManager.h - weak_ptr, shared_ptr을 이용해서 재활용함.
SceneManager.cpp line 48 - Scene이 바뀔 때 리소스 맵을 전부 비워주고 DXGIDevice 의 Trim을 호출해줌.

7. 위임설계(델리게이트)를 적용한 부분과 방식은?
Ken.cpp line 41, ken_spinning_kick_anim.json, Animator.cpp line 121 - 이벤트 타이밍에 Delegate에 등록, 바인드 된 객체의 함수 호출해줌

8. 게임오브젝트 또는 컴포넌트의 주소 유효성 검증은 어떤 클래스에서 담당하는가?
Object.h line 6 - GameObject와 Component가 Object를 상속받음. Object는 static 변수로 unordererd_set을 가지고있음.
	주로 체크가 필요한 곳이 Script인데 어느 Script든 그냥 IsValid(ptr)로 체크 가능.

9. 입력은 어떻게 처리하는가?
PlayerInputSystem.cpp line 22 - 실제 인풋 값을 관리하는 곳
PlayerInputSystem.cpp line 56 - 들어온 인풋 값으로 현재 PlayerInput Component가 등록한 함수들 호출함.
CameraController.cpp line 15, Ken.cpp line 23 - 단일키, 다중키의 Pressed, Released, Held 각각 함수 등록 가능,
	방향키(WASD, 화살표 키)에 Vector2를 인자로 갖는 함수 등록 가능. 방향키는 키를 누르든 안누르든 등록된 함수를 호출해서 (0, 0) 벡터도 인자로 올 수 있음.

10. 게임오브젝트도 상속을 사용하였나?
Object라는 베이스 클래스를 제외하고는 사용하지 않음. GameObject는 Component를 소유하고 생성, 삭제하는 컨테이너 역할

11. 컨텐츠 구현은 어떤 클래스를 상속하거나 생성하여 작성하여야 하는가?
컨텐츠 구현은 유니티처럼 GameObject를 생성하고 GameObject에 필요한 Component들을 붙이고 Script Component를 상속한 클래스에 로직을 작성해서 컨텐츠를 구현함.

12. Script Component의 생명주기 함수
ScriptSystem.cpp line 7 - ScriptSystem에 Script가 등록되면 Initialize 할 vector목록에 추가됨. Initialize 후에 Start할 목록에 추가됨.
	Start 후에는 Update, LateUpdate 목록에 추가됨.
Script.cpp line 32 - 가상함수는 함수 호출될 때 런타임에 가상함수 테이블을 참조해서 호출하기 때문에 비용이 듦.
	override 되지 않은 Update, LateUpdate는 호출 될 필요가 없음. Update, LateUpdate가 override 되지 않았다면 Update, LateUpdate 목록에서 제거됨.
	그런데 Update, LateUpdate가 override 되었는데도 사용자가 실수로 부모의 Update, LateUpdate를 호출하면 목록에서 제거될 위험이 있음.
	부모 클래스 Script에서 해당 함수들을 private으로 선언함.
	Update, LateUpdate를 호출해줄 ScriptSystem 클래스는 friend로 허용해둠.
	자식은 부모의 함수를 오버라이드는 할 수 있지만 호출은 못하게 함.